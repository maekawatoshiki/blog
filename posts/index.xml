<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on uint256_t&#39;s blog</title>
    <link>https://maekawatoshiki.github.io/blog/posts/</link>
    <description>Recent content in Posts on uint256_t&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Dec 2018 21:23:45 +0900</lastBuildDate>
    
	<atom:link href="https://maekawatoshiki.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自作JavaScriptエンジンの進捗</title>
      <link>https://maekawatoshiki.github.io/blog/posts/%E8%87%AA%E4%BD%9Cjavascript%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%AE%E9%80%B2%E6%8D%97/</link>
      <pubDate>Mon, 10 Dec 2018 21:23:45 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/blog/posts/%E8%87%AA%E4%BD%9Cjavascript%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%AE%E9%80%B2%E6%8D%97/</guid>
      <description> この記事は何? セキュリティキャンプ 修了生進捗 #seccamp OB/OG Advent Calendar 2018 20日目。
この記事では，セキュキャンが始まるちょっと前から作り始めた自作JSエンジン rapidus の進捗と，簡単に内部構造を説明していきたいと思います．
目次  大まかな仕様 内部構造  パーサー コード生成 VM &amp;hellip;.   1. 大まかな仕様 TL;DR  だいたいJSっぽいコードを書いて実行できる(===規格に完全には沿えていない) REPLがちょっと使える Tracing-JITに部分的には対応している(===うまく行くとめちゃくちゃ速い. NodeJSより速い.) 最近，Rustで書いたDLLをrequireから使えるようになった(===もはやなんでもできる!) また最近，非同期処理の実装を始めた  ちょっと詳しく 2. 内部構造 内部構造なんて大層なものではないですが、大体こんな感じ:
ソースコードが，パーサー→意味解析→コード生成と段階を経てVMで実行できる形式に変換されます．
VMから点線で矢印が出ていますが，これはevalやrequireなんかでVMからソースコード→&amp;hellip;→コード生成をしないといけない場合があるからです．
パーサー (src/parser.rs)  構文解析器（こうぶんかいせきき）とは、構文解析をおこなうプログラム。パーサ (parser)とも。プログラミング言語処理系の入力部分が代表的であるが、それに限らず設定ファイルの読み込みなど、構造を持った入力テキストの処理を行う。自然言語処理でも使われる。
構文解析器 - Wikipedia
 rapidusのパーサーは基本的に手書きの再帰下降構文解析器で構成されています．若干コード生成に関係するような処理もしていますが，基本的にはパーサーとしての機能のみを果たしています．特に面白い実装がしてあるわけでもないです．
意味解析 </description>
    </item>
    
    <item>
      <title>テスト</title>
      <link>https://maekawatoshiki.github.io/blog/posts/%E3%83%86%E3%82%B9%E3%83%88/</link>
      <pubDate>Sat, 08 Dec 2018 20:24:19 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/blog/posts/%E3%83%86%E3%82%B9%E3%83%88/</guid>
      <description> 普通に使えそう Hugoって便利
C  C  Rust  Rust  </description>
    </item>
    
    <item>
      <title>いろいろ</title>
      <link>https://maekawatoshiki.github.io/blog/posts/%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D/</link>
      <pubDate>Sat, 08 Dec 2018 20:06:33 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/blog/posts/%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D/</guid>
      <description>コードを書いてみる。
fn fibo(n: i32)-&amp;gt; i32 {ifn&amp;lt;=2{return1;}returnfibo(n-1)+fibo(n-2);}fn main(){letn=38;println!(&amp;#34;fibo({}) = {}&amp;#34;,n,fibo(n));} うん、いい感じ。</description>
    </item>
    
  </channel>
</rss>