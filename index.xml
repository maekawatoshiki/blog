<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uint256_t&#39;s blog</title>
    <link>https://maekawatoshiki.github.io/blog/</link>
    <description>Recent content on uint256_t&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Dec 2018 21:36:37 +0900</lastBuildDate>
    
	<atom:link href="https://maekawatoshiki.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自作JVMの進捗を書くところ</title>
      <link>https://maekawatoshiki.github.io/blog/posts/%E8%87%AA%E4%BD%9Cjvm%E3%81%AE%E9%80%B2%E6%8D%97%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%A8%E3%81%93%E3%82%8D/</link>
      <pubDate>Sat, 29 Dec 2018 21:36:37 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/blog/posts/%E8%87%AA%E4%BD%9Cjvm%E3%81%AE%E9%80%B2%E6%8D%97%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%A8%E3%81%93%E3%82%8D/</guid>
      <description>GitHubでコミットログ見てればなんとなく進捗はわかるけど，ちゃんと文章として書きだしたほうがいいかなって．
簡単な説明: JVM作るって何 突然ですが，皆さん，JVM使ってますか？
僕は(明示的には)使ってません．ですが 3 Billion Devices Run Java と言うくらいですから，世の中はJVMに支えられて動いているんでしょう．
だとしたら，どうしますか？
JVMを一から作ってみたくなりますよね?．
作り始めた動機は，これが全てです．
現状  以下の情報は 2018/Dec/29 時点での情報です．  どれくらい実用的なの ちょうど今日で，作り始めてから一週間です．実用的なものなんて作れるわけ無いです．
じゃあどれくらい動くの  javacを使って作ったクラスファイルを直接実行できる．  == クラスファイルの読み込み自体は(実装してない部分もあるけど)だいたいOK  地道にJVMの命令を実装している．今は約70命令実装済み． JDKの提供してくれるSystem.out.printlnとかはまだ読み込んで利用することができない．(命令が実装できてないので)  なので自作した．nativeなメソッドとして実装．以下実装済み System  static final PrintStream outがあるだけ  PrintStream  println(int) println(double) println(String)  String  valueOf(int)  StringBuilder  append(int) append(String) toString()  Object  形だけだけど．    いくつかサンプル 以下のコードはぜんぶ動く(はず)
 static {}を使った初期化ができる．System.outを作るときに必要だった． もちろん，ただのコンストラクタもあるよ．  class A { public static final int x; static { x = 123; } A() { System.</description>
    </item>
    
    <item>
      <title>自作JavaScriptエンジンの進捗</title>
      <link>https://maekawatoshiki.github.io/blog/posts/%E8%87%AA%E4%BD%9Cjavascript%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%AE%E9%80%B2%E6%8D%97/</link>
      <pubDate>Mon, 10 Dec 2018 21:23:45 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/blog/posts/%E8%87%AA%E4%BD%9Cjavascript%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%AE%E9%80%B2%E6%8D%97/</guid>
      <description>この記事は何? セキュリティキャンプ 修了生進捗 #seccamp OB/OG Advent Calendar 2018 20日目。
この記事では，セキュキャンが始まるちょっと前から作り始めた自作JSエンジン rapidus の進捗と，簡単に内部構造を説明していきたいと思います．
1. 概要 TL;DR  だいたいJSっぽいコードを書いて実行できる (規格にまだ沿えていない) REPLがちょっと使える Tracing-JITに部分的に対応している (うまくいくと速い) 最近，Rustで書いたDLLをrequireから使えるようになった (もはやなんでもできる!) また最近，非同期処理の実装を始めた  ちょっと詳しく 1. だいたいJS だいたいJSというのは，規格に沿えていなかったり 意外と基本的な機能が抜けている，という意味です．例えば，この記事を書いている時点ではObjectオブジェクトがなかったり(作り始めた)，組み込みオブジェクトの機能が足りていなかったりします．
ですが大体はJSなので，そこそこのコードは動きます．ちゃんとプロトタイプチェーンで継承的なこともできますよ．
ミラーラビン素数判定法で素数(&amp;lt;2^32)を判定したい! というニッチな需要にも対応できます．
function prime(n) { if (n == 2 || n == 3) return true; if ((n &amp;amp; 1) == 0) return false; var d = n - 1; while ((d &amp;amp; 1) == 0) d = Math.floor(d &amp;gt;&amp;gt; 1); for (var k = 0; k &amp;lt; 20; k++) { var t = d; var x = modpow(1 + Math.</description>
    </item>
    
    <item>
      <title>テスト</title>
      <link>https://maekawatoshiki.github.io/blog/posts/%E3%83%86%E3%82%B9%E3%83%88/</link>
      <pubDate>Sat, 08 Dec 2018 20:24:19 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/blog/posts/%E3%83%86%E3%82%B9%E3%83%88/</guid>
      <description> 普通に使えそう Hugoって便利
C  C  Rust  Rust  </description>
    </item>
    
    <item>
      <title>いろいろ</title>
      <link>https://maekawatoshiki.github.io/blog/posts/%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D/</link>
      <pubDate>Sat, 08 Dec 2018 20:06:33 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/blog/posts/%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D/</guid>
      <description>コードを書いてみる。
fn fibo(n: i32)-&amp;gt; i32 {ifn&amp;lt;=2{return1;}returnfibo(n-1)+fibo(n-2);}fn main(){letn=38;println!(&amp;#34;fibo({}) = {}&amp;#34;,n,fibo(n));} うん、いい感じ。</description>
    </item>
    
  </channel>
</rss>